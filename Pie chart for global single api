





// GLOBAL PIE CHART FOR SINGLE API

import axios from "axios";
import React, { useEffect, useState } from "react";
import Swal from "sweetalert2";
import { Pie } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend);

function NoOfCflBasedOnDepartment() {
  const [departmentCounts, setDepartmentCounts] = useState({});

  useEffect(() => {
    axios
      .get("http://localhost:8080/cfl/getAllCfl")
      .then((res) => {
        const departments = res?.data?.map((item) => item?.cflDepartment);

        // Count occurrences of each department
        const counts = departments.reduce((acc, dept) => {
          acc[dept] = (acc[dept] || 0) + 1;
          return acc;
        }, {});

        setDepartmentCounts(counts);
      })
      .catch(() => {
        Swal.fire({
          text: "Data not found",
          width: "350px",
          timer: 2000,
          icon: "error",
        });
      });
  }, []);

  // Prepare data for the Pie Chart
  const chartData = {
    labels: Object.keys(departmentCounts),
    datasets: [
      {
        data: Object.values(departmentCounts),
        backgroundColor: [
          "#FF6384",
          "#36A2EB",
          "#FFCE56",
          "#4BC0C0",
          "#9966FF",
          "#FF9F40",
        ],
        hoverOffset: 10, // Bulging effect on hover
      },
    ],
  };

  return (
    <div style={{ width: "400px", margin: "0 auto" }}>
      <h2>No of CFL Based on Department</h2>
      <Pie data={chartData} />
    </div>
  );
}

export default NoOfCflBasedOnDepartment;





















import axios from "axios";
import { ArcElement, Chart as ChartJS, Legend, Tooltip } from "chart.js";
import React, { useEffect, useState } from "react";
import { Doughnut } from "react-chartjs-2";
import Swal from "sweetalert2";

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend);

function NoOfEmployee() {
  const [employeeData, setEmployeeData] = useState({ labels: [], data: [] });

  useEffect(() => {
    axios
      .get("http://localhost:8080/employees/getAll") // Replace with your actual API endpoint
      .then((res) => {
        const apiData = res.data; // Assuming this is an array of employee objects

        // Grouping employees by role
        const roleCounts = apiData.reduce((acc, employee) => {
          const role = employee.role; // Adjust if your field name is different
          acc[role] = (acc[role] || 0) + 1;
          return acc;
        }, {});

        // Extracting labels and data dynamically
        const labels = Object.keys(roleCounts);
        const data = Object.values(roleCounts);

        setEmployeeData({ labels, data });
      })
      .catch(() => {
        Swal.fire({
          text: "Failed to fetch employee data",
          icon: "error",
          width: "350px",
          timer: 2000,
          showConfirmButton: false,
        });
      });
  }, []);

  // Colors for the chart
  const colors = [
    "rgb(255, 99, 132)",
    "rgb(54, 162, 235)",
    "rgb(255, 205, 86)",
    "rgb(75, 192, 192)",
    "rgb(153, 102, 255)",
    "rgb(255, 159, 64)",
  ];

  const chartData = {
    labels: employeeData.labels,
    datasets: [
      {
        label: "Number of Employees",
        data: employeeData.data,
        backgroundColor: colors.slice(0, employeeData.labels.length), // Dynamic color assignment
        hoverOffset: 10, // Makes the segment bulge on hover
      },
    ],
  };

  return (
    <div style={{ width: "400px", margin: "auto" }}>
      <h2 style={{ textAlign: "center" }}>Employee Distribution</h2>
      <Doughnut data={chartData} />
    </div>
  );
}

export default NoOfEmployee;





// =========================================================================================


